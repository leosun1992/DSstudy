<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Analytics Cases</title>
    <link href="/2020/12/28/Analytics_cases/"/>
    <url>/2020/12/28/Analytics_cases/</url>
    
    <content type="html"><![CDATA[<h1 id="Case-1"><a href="#Case-1" class="headerlink" title="Case 1"></a>Case 1</h1><p><strong>Emotion analysis of the two famous episodes of <em>Game of Thrones</em></strong></p><p>I used Python and R to analyze the emotions of the two episodes of <em>Game of Thrones</em>, namely <em>s03e09</em> <em>The Rains of Castamere</em> and <em>s04e02</em> <em>The Lion and the Rose</em>. The two famous weddings in the play are included in these two episodes.</p><h6 id="1-Clean-the-script-and-change-their-format"><a href="#1-Clean-the-script-and-change-their-format" class="headerlink" title="1. Clean the script and change their format"></a>1. Clean the script and change their format</h6><p>I called <code>Pandas</code> to read the script, remove the extra content, spaces and dividing lines, and finally export it to a CSV format .</p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/20201228%E6%88%AA%E5%B1%8F2020-05-10%2016.00.29.png" alt="截屏2020-05-10 16.00.29"></p><h6 id="2-Use-R-to-analyse-emotion-of-the-scripts"><a href="#2-Use-R-to-analyse-emotion-of-the-scripts" class="headerlink" title="2. Use R to analyse emotion of the scripts"></a>2. Use R to analyse emotion of the scripts</h6><p>I imported the data into Rstudio, and called the four packages <code>dplyr</code>,<code> tidytext</code>, <code>tidyr</code> and<code>ggplot2</code>. First call <code>tidytext</code> to split the original sentence into words. At the same time, with the help of the emotional dictionary <em>nrc</em> issued by the Canadian National Research Council, each word can correspond to one or more emotional attributes and sentimental attributes. </p><p>The emotion of a single word was determined, and then a comprehensive judgment is made of how many words are included in the different emotions of each line. Divide the entire text into several paragraphs, use <code>geom_col</code> to let R draw a histogram, and different emotions correspond to different colors. Call the <code>facet_wrap</code> function to draw different emotions apart and draw them separately to get the following chart.</p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/2020122820201225Rplot-s3e9-initial.png" alt="Rplot-s3e9-initial"></p><p>However, the obtained image results show that the positive emotions and negative emotions rise at the same time at the end, which is not reasonable, and the key to data analysis is to dig deep into this puzzling analysis result.</p><p>After the analysis of the word frequency, it was found that there are many nouns such as lord and king in the script. They do not have a clear emotional attribute in the play, but they are recognized as emotional words in the reference dictionary, both positive and negative. Both Robb and Jon are kings, but Joffery is also a king, which causes inaccuracy. So I used the <code>anti_join</code> function and revised the customized stop word list to get rid of words that may interfere with the analysis results. And I filtered sentimental attributes out, so only the emotions are analyzed. </p><p>The graph shows a mixture of emotions, the cheerful atmosphere suddenly drops, trust and expectations fluctuate, fear and sorrow suddenly rise, the value of anger suddenly bursts with several surprises. The result exactly reflects the plot development of the Red Wedding. Using the same method to deal with the second script, the final result shows two weddings with very different emotional changes, which is very interesting.</p><p><strong><em>s03e09 The Rains of Castamere:</em></strong><br><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/20201225Rplot-s3e9final.png" alt="Rplot-s3e9final"><br><strong><em>s04e02 The Lion and the Rose:</em></strong><br><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/20201225Rplot-s4e2final.png" alt="Rplot-s4e2final"></p><h1 id="Case-2"><a href="#Case-2" class="headerlink" title="Case 2"></a>Case 2</h1><p><strong>Visualization of public opinion analysis</strong></p><p>I first crawled the customer comments of an online store selling steak, and called <code>pandas</code> to read and convert them into a dataframe. Then I used <code>SnowNLP</code>, a sentiment analysis tool, to calculate sentimental values of all comments.</p><p>After removing extreme values and drawing a line chart, the shop owner can view the corresponding comments according to the anomalies in the figure and discover the problems and deficiencies.</p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/20201225public-opinion.png" alt="public-opinion"></p><h1 id="Case-3"><a href="#Case-3" class="headerlink" title="Case 3"></a>Case 3</h1><p><strong>Reading open data source and data visualization</strong></p><p>I downloaded a CSV file containing Corporate Bond Yield Rate on a source platform, and used <code>read_csv</code> to read it in Python.</p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/2020122820201225%E6%88%AA%E5%B1%8F2020-05-10%2016.08.30.png" alt="截屏2020-05-10 16.08.30"></p><p>And I modified the column names and sort the rates by time. Then I set the time as a index of the dataframe so that Python can draw the chart beautifully and properly.</p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/2020122820201225plot-rate.png" alt="plot-rate"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Python, R</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Beef Steak</title>
    <link href="/2020/12/21/steak/"/>
    <url>/2020/12/21/steak/</url>
    
    <content type="html"><![CDATA[<h1 id="牛排煎法"><a href="#牛排煎法" class="headerlink" title="牛排煎法"></a>牛排煎法</h1><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><ul><li>原切牛排，不要已经腌制过的</li><li>盐，黑胡椒，橄榄油</li><li>黄油，大蒜，百里香（可省略）</li></ul><h2 id="解冻"><a href="#解冻" class="headerlink" title="解冻"></a>解冻</h2><ul><li>头一天放在冰箱<strong>冷藏格</strong>，第二天取出。可以在包装袋的一角剪一个小口，这样解冻不会挤压出太多血水（效果最好的方法）</li><li>或将整个真空袋浸泡在常温水中（迅速的方法）。</li></ul><h2 id="腌制"><a href="#腌制" class="headerlink" title="腌制"></a>腌制</h2><ol><li><p>解冻的牛排放置至室温后（一般在室内放20分钟），<strong>先用厨房用纸吸去表面血水</strong>。</p></li><li><p>表面先倒一层橄榄油，涂抹均匀。然后均匀撒上盐和黑胡椒粉（盐粒和胡椒颗粒尽量大，牛肉品质好可以少放一些调料）。还可以用切开的大蒜在牛排表面擦一下。</p></li><li><p>腌制过程<strong>要么小于三分钟要么大于40分钟</strong>，因用调料腌制时牛肉表面会产生水分，水分会影响煎牛排表面时的<em>美拉德反应</em><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="美拉德反应亦称非酶棕色化反应，是广泛存在于食品工业的一种非酶褐变。是羰基化合物（还原糖类）和氨基化合物（氨基酸和蛋白质）间的反应，经过复杂的历程最终生成棕色甚至是黑色的大分子物质类黑精或称拟黑素，故又称羰胺反应（1912年法国化学家L.C.Maillard提出）。简单的说，这个反应需要的条件为：蛋白质，还原糖，高温以及较少水份。">[1]</span></a></sup>，腌制的时间短或足够长都可以防止表面出水。</p></li></ol><h2 id="煎制过程"><a href="#煎制过程" class="headerlink" title="煎制过程"></a>煎制过程</h2><ol><li>平底锅的效果最好，因为牛肉与锅接触各个部位会受热均匀，家里的炒锅也可以使用，只不过需要时常按压以及调整受热的部位，</li><li>先将锅用<strong>大火</strong>烧至<strong>冒烟</strong>（<em>美拉德反应</em><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="美拉德反应亦称非酶棕色化反应，是广泛存在于食品工业的一种非酶褐变。是羰基化合物（还原糖类）和氨基化合物（氨基酸和蛋白质）间的反应，经过复杂的历程最终生成棕色甚至是黑色的大分子物质类黑精或称拟黑素，故又称羰胺反应（1912年法国化学家L.C.Maillard提出）。简单的说，这个反应需要的条件为：蛋白质，还原糖，高温以及较少水份。">[1]</span></a></sup>需要足够高的温度，高温可以煎出漂亮的焦化层），因牛排表面已经涂抹了橄榄油，不需要放额外的油进锅。若牛排带有大块脂肪边，可以先煎脂肪边。然后开始煎第一面，下锅15秒左右闻到牛肉香味或油烟过大，可以转成<strong>中火</strong>，煎的时间取决于你想要的熟度以及牛排的厚度（一般2cm厚，想要5-7成熟大概<strong>一分钟-一分半</strong>），非熟成牛排若观察到向上的一面开始微微渗血水即可翻面。期间可以稍微按压，有些部位受热会翘起，按压可以使得各个部位都受热均匀，若担心太老可以掀起一角看一下这一面的状况。</li><li>翻面开始煎第二面后，可以锅里放入黄油块，香料和大蒜。黄油融化，大蒜和香料味道差不多进入黄油后，将锅稍微倾斜，用勺子将黄油浇到牛排表面。（浇黄油这步也可以省略，只用盐和胡椒调味）</li><li>煎第二面和第一面时间差不多即可关火，也可以用夹子轻轻按压牛排，感受软硬的程度。一般煎至软硬程度和<strong>大拇指抵到中指</strong>时，大拇指下方的肌肉的软硬程度差不多时关火。</li></ol><h2 id="醒肉"><a href="#醒肉" class="headerlink" title="醒肉"></a>醒肉</h2><p>一般刚煎完的牛排会有一个假硬的状态，汁水也比较分散，不在内部集中，直接就吃的话效果不好。可以放在微波炉或者烤箱里保温几分钟，或用锡纸包裹或用一个罩子罩住几分钟，达到保温效果即可。</p><p>肉醒完之后，用刀斜着切开，一般外圈灰色，内圈粉红色即为理想的效果。</p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/20201228IMG_5851.jpeg" alt="IMG_5851"></p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/20201228IMG_5752.jpeg"></p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>美拉德反应亦称非酶棕色化反应，是广泛存在于食品工业的一种非酶褐变。是羰基化合物（还原糖类）和氨基化合物（氨基酸和蛋白质）间的反应，经过复杂的历程最终生成棕色甚至是黑色的大分子物质类黑精或称拟黑素，故又称羰胺反应（1912年法国化学家L.C.Maillard提出）。简单的说，这个反应需要的条件为：蛋白质，还原糖，高温以及较少水份。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>recipe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL Note</title>
    <link href="/2020/06/14/SQL_note/"/>
    <url>/2020/06/14/SQL_note/</url>
    
    <content type="html"><![CDATA[<h1 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h1><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>主键是关系表中记录的唯一标识。主键的选取非常重要：主键不要带有业务含义，而应该使用BIGINT自增或者GUID类型。主键也不应该允许<code>NULL</code>。</p><p>可以使用多个列作为联合主键，但联合主键并不常用。</p><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p>在<code>students</code>表中，通过<code>class_id</code>的字段，可以把数据与另一张表关联起来，这种列称为<code>外键</code>。</p><p>外键并不是通过列名实现的，而是通过定义外键约束实现的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> fk_class_id<br><span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (class_id)<br><span class="hljs-keyword">REFERENCES</span> classes (<span class="hljs-keyword">id</span>);<br></code></pre></td></tr></table></figure><p>其中，外键约束的名称<code>fk_class_id</code>可以任意，<code>FOREIGN KEY (class_id)</code>指定了<code>class_id</code>作为外键，<code>REFERENCES classes (id)</code>指定了这个外键将关联到<code>classes</code>表的<code>id</code>列（即<code>classes</code>表的主键）。</p><p>通过定义外键约束，关系数据库可以保证无法插入无效的数据。即如果<code>classes</code>表不存在<code>id=99</code>的记录，<code>students</code>表就无法插入<code>class_id=99</code>的记录。</p><p>由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠应用程序自身来保证逻辑的正确性。这种情况下，<code>class_id</code>仅仅是一个普通的列，只是它起到了外键的作用而已。</p><p>要删除一个外键约束，也是通过<code>ALTER TABLE</code>实现的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> fk_class_id;<br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>关系数据库通过外键可以实现一对多、多对多和一对一的关系。外键既可以通过数据库来约束，也可以不设置约束，仅依靠应用程序的逻辑来保证。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>如果要经常根据<code>score</code>列进行查询，就可以对<code>score</code>列创建索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> idx_score (score);<br></code></pre></td></tr></table></figure><p>使用<code>ADD INDEX idx_score (score)</code>就创建了一个名称为<code>idx_score</code>，使用列<code>score</code>的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> idx_name_score (<span class="hljs-keyword">name</span>, score);<br></code></pre></td></tr></table></figure><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>在设计关系数据表的时候，看上去唯一的列，例如身份证号、邮箱地址等，因为他们具有业务含义，因此不宜作为主键。</p><p>但是，这些列根据业务要求，又具有唯一性约束：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一索引。例如，我们假设<code>students</code>表的<code>name</code>不能重复：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span> uni_name (<span class="hljs-keyword">name</span>);<br></code></pre></td></tr></table></figure><p>通过<code>UNIQUE</code>关键字我们就添加了一个唯一索引。</p><p>也可以只对某一列添加一个唯一约束而不创建唯一索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> students<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> uni_name <span class="hljs-keyword">UNIQUE</span> (<span class="hljs-keyword">name</span>);<br></code></pre></td></tr></table></figure><p>这种情况下，<code>name</code>列没有索引，但仍然具有唯一性保证。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>通过对数据库表创建索引，可以提高查询速度。</p><p>通过创建唯一索引，可以保证某一列的值具有唯一性。</p><p>数据库索引对于用户和应用程序来说都是透明的。</p><h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><p>虽然<code>SELECT</code>可以用作计算，但它并不是SQL的强项。但是，不带<code>FROM</code>子句的<code>SELECT</code>语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效。许多检测工具会执行一条<code>SELECT 1;</code>来测试数据库连接。</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>使用SELECT查询的基本语句<code>SELECT * FROM &lt;表名&gt;</code>可以查询一个表的所有行和所有列的数据。</p><p>SELECT查询的结果是一个二维表。</p><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>条件查询的语法就是：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件表达式&gt;<br></code></pre></td></tr></table></figure><p>如果不加括号，条件运算按照<code>NOT</code>、<code>AND</code>、<code>OR</code>的优先级进行，即<code>NOT</code>优先级最高，其次是<code>AND</code>，最后是<code>OR</code>。加上括号可以改变优先级。</p><h3 id="常用的条件表达式"><a href="#常用的条件表达式" class="headerlink" title="常用的条件表达式"></a>常用的条件表达式</h3><table><thead><tr><th align="left">条件</th><th align="left">表达式举例1</th><th align="left">表达式举例2</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">使用=判断相等</td><td align="left">score = 80</td><td align="left">name = ‘abc’</td><td align="left">字符串需要用单引号括起来</td></tr><tr><td align="left">使用&gt;判断大于</td><td align="left">score &gt; 80</td><td align="left">name &gt; ‘abc’</td><td align="left">字符串比较根据ASCII码，中文字符比较根据数据库设置</td></tr><tr><td align="left">使用&gt;=判断大于或相等</td><td align="left">score &gt;= 80</td><td align="left">name &gt;= ‘abc’</td><td align="left"></td></tr><tr><td align="left">使用&lt;判断小于</td><td align="left">score &lt; 80</td><td align="left">name &lt;= ‘abc’</td><td align="left"></td></tr><tr><td align="left">使用&lt;=判断小于或相等</td><td align="left">score &lt;= 80</td><td align="left">name &lt;= ‘abc’</td><td align="left"></td></tr><tr><td align="left">使用&lt;&gt;判断不相等</td><td align="left">score &lt;&gt; 80</td><td align="left">name &lt;&gt; ‘abc’</td><td align="left"></td></tr><tr><td align="left">使用LIKE判断相似</td><td align="left">name LIKE ‘ab%’</td><td align="left">name LIKE ‘%bc%’</td><td align="left">%表示任意字符，例如’ab%’将匹配’ab’，’abc’，’abcd’</td></tr></tbody></table><h2 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h2><p>使用<code>SELECT 列1, 列2, 列3 FROM ...</code>时，还可以给每一列起个别名，这样，结果集的列名就可以与原表的列名不同。它的语法是:</p><p><code>SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM ...</code>。</p><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>使用<code>SELECT *</code>表示查询表的所有列，使用<code>SELECT 列1, 列2, 列3</code>则可以仅返回指定列，这种操作称为投影。</p><p><code>SELECT</code>语句可以对结果集的列进行重命名。</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>默认的排序规则是<code>ASC</code>：“升序”，即从小到大。<code>ASC</code>可以省略，即<code>ORDER BY score ASC</code>和<code>ORDER BY score</code>效果一样。</p><p>如果有<code>WHERE</code>子句，那么<code>ORDER BY</code>子句要放到<code>WHERE</code>子句后面。例如，查询一班的学生成绩，并按照倒序排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span>, <span class="hljs-keyword">name</span>, gender, score<br><span class="hljs-keyword">FROM</span> students<br><span class="hljs-keyword">WHERE</span> class_id = <span class="hljs-number">1</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>可见，分页查询的关键在于，首先要确定每页需要显示的结果数量<code>pageSize</code>（这里是3），然后根据当前页的索引<code>pageIndex</code>（从1开始），确定<code>LIMIT</code>和<code>OFFSET</code>应该设定的值：</p><ul><li><code>LIMIT</code>总是设定为<code>pageSize</code>；</li><li><code>OFFSET</code>计算公式为<code>pageSize * (pageIndex - 1)</code>。</li></ul><p>这样就能正确查询出第N页的记录集。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><code>OFFSET</code>是可选的，如果只写<code>LIMIT 15</code>，那么相当于<code>LIMIT 15 OFFSET 0</code>。</p><p>在MySQL中，<code>LIMIT 15 OFFSET 30</code>还可以简写成<code>LIMIT 30, 15</code>。</p><p>使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>分页时，随着<code>N</code>越来越大，查询效率也会越来越低。</p><h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><p>使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>可以对结果集进行分页，每次查询返回结果集的一部分；</p><p>分页查询需要先确定每页的数量和当前页数，然后确定<code>LIMIT</code>和<code>OFFSET</code>的值。</p><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><p><code>COUNT(*)</code>表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是<code>COUNT(*)</code>。</p><p>通常，使用聚合查询时，我们应该给列名设置一个别名，便于处理结果：</p><p><code>SELECT COUNT(*) num FROM students;</code></p><p><code>COUNT(*)</code>和<code>COUNT(id)</code>实际上是一样的效果。另外注意，聚合查询同样可以使用<code>WHERE</code>条件，因此我们可以方便地统计出有多少男生、多少女生、多少80分以上的学生等：</p><p>除了<code>COUNT()</code>函数外，SQL还提供了如下聚合函数：</p><table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">SUM</td><td align="left">计算某一列的合计值，该列必须为数值类型</td></tr><tr><td align="left">AVG</td><td align="left">计算某一列的平均值，该列必须为数值类型</td></tr><tr><td align="left">MAX</td><td align="left">计算某一列的最大值</td></tr><tr><td align="left">MIN</td><td align="left">计算某一列的最小值</td></tr></tbody></table><p>注意，<code>MAX()</code>和<code>MIN()</code>函数并不限于数值类型。如果是字符类型，<code>MAX()</code>和<code>MIN()</code>会返回排序最后和排序最前的字符。</p><p>要特别注意：如果聚合查询的<code>WHERE</code>条件没有匹配到任何行，<code>COUNT()</code>会返回0，而<code>SUM()</code>、<code>AVG()</code>、<code>MAX()</code>和<code>MIN()</code>会返回<code>NULL</code>;</p><p>也可以使用多个列进行分组。例如，我们想统计各班的男生和女生人数：</p><p><code>SELECT class_id, gender, COUNT(*) num FROM students GROUP BY class_id, gender;</code></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="笛卡尔积查询（返回结果会非常多，慎用）"><a href="#笛卡尔积查询（返回结果会非常多，慎用）" class="headerlink" title="笛卡尔积查询（返回结果会非常多，慎用）"></a>笛卡尔积查询（返回结果会非常多，慎用）</h3><p>SELECT查询不但可以从一张表查询数据，还可以从多张表同时查询数据。查询多张表的语法是：<code>SELECT * FROM &lt;表1&gt; &lt;表2&gt;</code>。</p><p>例如，同时从<code>students</code>表和<code>classes</code>表的“乘积”，即查询数据，可以这么写：</p><p><code>SELECT * FROM students, classes;</code></p><p>这种一次查询两个表的数据，查询的结果也是一个二维表，它是<code>students</code>表和<code>classes</code>表的“乘积”，即<code>students</code>表的每一行与<code>classes</code>表的每一行都两两拼在一起返回。结果集的列数是<code>students</code>表和<code>classes</code>表的列数之和，行数是<code>students</code>表和<code>classes</code>表的行数之积。</p><p>注意，多表查询时，要使用<code>表名.列名</code>这样的方式来引用列和设置别名，这样就避免了结果集的列名重复问题。但是，用<code>表名.列名</code>这种方式列举两个表的所有列实在是很麻烦，所以SQL还允许给表设置一个别名，让我们在投影查询中引用起来稍微简洁一点：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">SELECT</span><br>    <span class="hljs-selector-tag">s</span><span class="hljs-selector-class">.id</span> <span class="hljs-selector-tag">sid</span>,<br>    <span class="hljs-selector-tag">s</span><span class="hljs-selector-class">.name</span>,<br>    <span class="hljs-selector-tag">s</span><span class="hljs-selector-class">.gender</span>,<br>    <span class="hljs-selector-tag">s</span><span class="hljs-selector-class">.score</span>,<br>    <span class="hljs-selector-tag">c</span><span class="hljs-selector-class">.id</span> <span class="hljs-selector-tag">cid</span>,<br>    <span class="hljs-selector-tag">c</span><span class="hljs-selector-class">.name</span> <span class="hljs-selector-tag">cname</span><br><span class="hljs-selector-tag">FROM</span> <span class="hljs-selector-tag">students</span> <span class="hljs-selector-tag">s</span>, <span class="hljs-selector-tag">classes</span> <span class="hljs-selector-tag">c</span>;<br></code></pre></td></tr></table></figure><h3 id="更好的选择：使用外键进行连接"><a href="#更好的选择：使用外键进行连接" class="headerlink" title="更好的选择：使用外键进行连接"></a>更好的选择：使用外键进行连接</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <br>COUNT(classes.name)  num <br><span class="hljs-keyword">FROM</span> students, classes <br><span class="hljs-keyword">WHERE</span> students.class_id = classes.id <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> classes.name;<br></code></pre></td></tr></table></figure><p><code>where s.class_id=c.id</code></p><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p>这时，连接查询就派上了用场。我们先使用最常用的一种内连接——INNER JOIN来实现：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score<br><span class="hljs-keyword">FROM</span> students s<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> classes c<br><span class="hljs-keyword">ON</span> s.class_id = c.id;<br></code></pre></td></tr></table></figure><p>注意INNER JOIN查询的写法是：</p><ol><li>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；    </li><li>再确定需要连接的表，使用<code>INNER JOIN &lt;表2&gt;</code>的语法；</li><li>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class_id = c.id</code>，表示<code>students</code>表的<code>class_id</code>列与<code>classes</code>表的<code>id</code>列相同的行需要连接；</li><li>可选：加上<code>WHERE</code>子句、<code>ORDER BY</code>等子句。</li></ol><p>对于这么多种JOIN查询，到底什么使用应该用哪种呢？其实我们用图来表示结果集就一目了然了。</p><p>假设查询语句是：</p><p><code>SELECT ... FROM tableA ??? JOIN tableB ON tableA.column1 = tableB.column2;</code></p><p>我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：</p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/20201221l.png" alt="inner-join"></p><p>LEFT OUTER JOIN是选出左表存在的记录：</p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/20201221l-20201221220852375.png" alt="left-outer-join"></p><p>RIGHT OUTER JOIN是选出右表存在的记录：</p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/2020122120200804l-20200804164712932.png" alt="right-outer-join"></p><p>FULL OUTER JOIN则是选出左右表都存在的记录：</p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/20200804l-20200804164713005.png" alt="full-outer-join"></p><h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><p>JOIN查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；</p><p>INNER JOIN是最常用的一种JOIN查询，它的语法是<code>SELECT ... FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件...&gt;</code>；</p><p>JOIN查询仍然可以使用<code>WHERE</code>条件和<code>ORDER BY</code>排序。</p><h1 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h1><h2 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h2><p><code>INSERT</code>语句的基本语法是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">INSERT</span> INTO &lt;表名&gt; (字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, ...) VALUES (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (class_id, <span class="hljs-keyword">name</span>, gender, score) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;大牛&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">80</span>);<br></code></pre></td></tr></table></figure><p>注意到我们并没有列出<code>id</code>字段，也没有列出<code>id</code>字段对应的值，这是因为<code>id</code>字段是一个自增主键，它的值可以由数据库自己推算出来。此外，如果一个字段有默认值，那么在<code>INSERT</code>语句中也可以不出现。</p><p>要注意，字段顺序不必和数据库表的字段顺序一致，但值的顺序必须和字段顺序一致。也就是说，可以写<code>INSERT INTO students (score, gender, name, class_id) ...</code>，但是对应的<code>VALUES</code>就得变成<code>(80, &#39;M&#39;, &#39;大牛&#39;, 2)</code>。</p><p>还可以一次性添加多条记录，只需要在<code>VALUES</code>子句中指定多个记录值，每个记录是由<code>(...)</code>包含的一组值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> students (class_id, <span class="hljs-keyword">name</span>, gender, score) <span class="hljs-keyword">VALUES</span><br>  (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;大宝&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">87</span>),<br>  (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;二宝&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">81</span>);<br></code></pre></td></tr></table></figure><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2>]]></content>
    
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Note</title>
    <link href="/2020/05/16/Git_note/"/>
    <url>/2020/05/16/Git_note/</url>
    
    <content type="html"><![CDATA[<h1 id="Create-repository"><a href="#Create-repository" class="headerlink" title="Create repository"></a>Create repository</h1><ol><li><p>Create a empty directory.</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br><span class="hljs-built_in">cd</span> xxx<br>mkdir xxx<br><span class="hljs-built_in">cd</span> xxx<br><span class="hljs-built_in">pwd</span><br></code></pre></td></tr></table></figure></li><li><p>Use  <code>git init</code> to initialize a new git repository.</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p> This command will generate a hidden folder named .git, and we can use <code>ls -ah</code> to see it in Terminal.</p></li><li><p>The text encoding should be consistent, and UTF-8 is strongly recommended.</p></li><li><p>Put the file under the git directory.</p></li><li><p>Use  <code>git add</code> to add the file to a git.</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> readme.txt</span><br></code></pre></td></tr></table></figure><p> No news is good news in Unix.</p></li><li><p>Use <code>git commit</code> to submit the file to the git.</p> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;message&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>The <code>git add</code> and <code>git commit</code> could be used together to add few files and submit them at once.</p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> readme.txt</span><br>git <span class="hljs-keyword">add</span><span class="bash"> readme2.txt</span><br>git commit -m <span class="hljs-string">&quot;message&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h1><ol><li>If a modification is made to the file, use <code>git status</code> to see the status of the file in the git.</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">$ git status<br><br>On branch master<br>Changes not staged for <span class="hljs-keyword">commit</span>:<br>  (<span class="hljs-keyword">use</span> <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">update</span> what will be committed)<br>  (<span class="hljs-keyword">use</span> <span class="hljs-string">&quot;git checkout -- &lt;file&gt;...&quot;</span> <span class="hljs-keyword">to</span> discard changes <span class="hljs-keyword">in</span> working <span class="hljs-keyword">directory</span>)<br><br>modified:   readme.txt<br><br><span class="hljs-keyword">no</span> changes added <span class="hljs-keyword">to</span> <span class="hljs-keyword">commit</span> (<span class="hljs-keyword">use</span> <span class="hljs-string">&quot;git add&quot;</span> <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> <span class="hljs-string">&quot;git commit -a&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li><p>Use <code>git diff</code> to see the difference between 2 versions.</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">git</span> <span class="hljs-selector-tag">diff</span> <span class="hljs-selector-tag">readme</span><span class="hljs-selector-class">.txt</span><br></code></pre></td></tr></table></figure><p> The difference is between the <strong>committed version</strong> and <strong>present version in the folder</strong>, whether it is submitted already or not.</p></li><li><p>After knowing the diff, use <code>add</code>, <code>commit</code> and <code>status</code> to submit and check.</p></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li><li>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</li></ul><h2 id="Reset-versions"><a href="#Reset-versions" class="headerlink" title="Reset versions"></a>Reset versions</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>To see the history record of committing and their comment.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard head^</span><br></code></pre></td></tr></table></figure><p>Head is the current verision, and head^ denotes the last one. Thus, the head^^.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">git reset --hard commit<span class="hljs-constructor">_id(<span class="hljs-params">e</span>.<span class="hljs-params">g</span>. 1094a)</span><br></code></pre></td></tr></table></figure><p>Use head or the commit id to designate which version you want to reset.</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">git <span class="hljs-built_in">ref</span>log<br></code></pre></td></tr></table></figure><p>The code is to see commands you made.</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>现在总结一下：</p><ul><li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li><li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li><li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li></ul><h2 id="Working-directory-and-repository"><a href="#Working-directory-and-repository" class="headerlink" title="Working directory and repository"></a>Working directory and repository</h2><p>Working directory: the directory you can see in finder.</p><p>Repository:can be generally divided into 2 sections, which are stage and branch They are all stored in the hidden folder named .git.</p><p>When you do <code>git add filename</code>, the file is added to stage, and will be transferred to branch aftering doing <code>git commit -m</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git diff filename</span><br></code></pre></td></tr></table></figure><p>is used to see the difference between wd and stage.</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git diff cached</span><br></code></pre></td></tr></table></figure><p>is used to see the diff between stage and branch.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git diff HEAD <span class="hljs-comment">-- filename</span><br></code></pre></td></tr></table></figure><p>is to see the diff between wd and branch.</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><ol><li><p>When the modification is just within the wd, just use</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git checkout <span class="hljs-comment">-- filename</span><br></code></pre></td></tr></table></figure><p>to discard the changes you don’t want.</p><p>==In new version git:==</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">git <span class="hljs-built_in">restore</span> filename<br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>When the changes have been added to the stage and not commited to branch, use</p> <figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">git <span class="hljs-meta">reset</span> HEAD <span class="hljs-meta">filename</span><br></code></pre></td></tr></table></figure><p> to unstage the changes and put them back to wd. Then, use <code>git checkout -- filename</code> to dropout the changes in wd. </p><p> ==In new version git:==</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">git <span class="hljs-keyword">restore</span> <span class="hljs-comment">--staged filename</span><br></code></pre></td></tr></table></figure></li><li><p>When the changes have been committed to branch, refer to reset versions.</p></li></ol><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>又到了小结时间。</p><p>场景1：适用于还没有git add到stage，当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。该命令其实就是用版本库的版本替换工作区的的版本。</p><p>==<code>git restore filename</code>==</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD </code>，就回到了场景1，第二步按场景1操作。==<code>git restore -staged filename</code>==</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>一节，不过前提是没有推送到远程库。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git rm filename</span><br></code></pre></td></tr></table></figure><p>Use the command is to remove the file from wd(like <code>rm filename</code>), and git rm is like git add, which let the changes pass to stage.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;remove filename&quot;</span><br></code></pre></td></tr></table></figure><p>Use commit to apply the deleting action to branch, then the file doesn’t exist in wd, stage and branch.</p><p>After <code>git rm</code> or <code>rm</code> is used, and no commit is made, we can use </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git checkout <span class="hljs-comment">-- filename</span><br></code></pre></td></tr></table></figure><p><code>git checkout -- filename</code> means to use the version in master to replace the version in wd. The process is much like switching wd to branch version or just dropping the wd version and use the branch version.</p><p>So we can use the restore command when the changes(removes)  just happen in wd:</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">git <span class="hljs-built_in">restore</span> filename<br></code></pre></td></tr></table></figure><p>to retrieve the version in the branch.</p><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p><p>删除有些类似撤销修改。</p><ol><li>如果仅仅使用rm来删除文件，只是删除了工作区的文件，没有提交到暂存区，这时候可以直接用<code>git checkout -- file</code> or <code>git restore filename</code>来从版本库恢复。</li><li>若使用<code>git rm</code>,即删除了工作区的文件，并将这个改动提交到了暂存区，此时需要先从暂存区恢复到工作区：用<code>git reset HEAD filename</code>or <code>git restore --staged filename</code>来恢复到工作区，再从第一步开始从版本库恢复。</li><li>习惯add之后commit一次。</li></ol><h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><p>SSH keys</p><p>public SSH key:id_rsa.pub</p><p>private SSH key:id_rsa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure><p>ssh-keygen -t rsa -C”emailaddress”</p><h2 id="Add-and-Push-remote-repo"><a href="#Add-and-Push-remote-repo" class="headerlink" title="Add and Push remote repo"></a>Add and Push remote repo</h2><ol><li><p>Create a new repo in GH.</p></li><li><p>Use </p> <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">git remote <span class="hljs-keyword">add</span><span class="bash"> origin git@github.com:username/reponame.git</span><br></code></pre></td></tr></table></figure><p> to create connection between domestic and remote repo.</p></li><li><p>Use</p> <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><p> to push the master to remote origin repo for the first time.</p></li><li><p>Use </p> <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure><p> to push the master to GH.</p></li></ol><h2 id="Clone-from-remote-repo"><a href="#Clone-from-remote-repo" class="headerlink" title="Clone from remote repo"></a>Clone from remote repo</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:username/reponame.git<br></code></pre></td></tr></table></figure><h1 id="Branch-management"><a href="#Branch-management" class="headerlink" title="Branch management"></a>Branch management</h1><h2 id="创建并合并分支"><a href="#创建并合并分支" class="headerlink" title="创建并合并分支"></a>创建并合并分支</h2><p>在<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p><p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/202012160-20201216143047377.png" alt="git-br-initial"></p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><p><img src="https://cdn.jsdelivr.net/gh/leosun1992/Pic@master/uPic/20201216l-20201216143047417.png" alt="git-br-create"></p><p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919022387118368/l" alt="git-br-dev-fd"></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919022412005504/0" alt="git-br-ff-merge"></p><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919022479428512/0" alt="git-br-rm"></p><p>真是太神奇了，你看得出来有些提交是通过分支完成的吗？</p><p>Git鼓励大量使用分支：</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch </code></p><p>切换分支：<code>git checkout </code>或者<code>git switch </code></p><p>创建+切换分支：<code>git checkout -b </code>或者<code>git switch -c </code></p><p>合并某分支到当前分支：<code>git merge </code></p><p>删除分支：<code>git branch -d </code></p><h2 id="Solve-Conflicts"><a href="#Solve-Conflicts" class="headerlink" title="Solve Conflicts"></a>Solve Conflicts</h2><h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><p>用<code>git log --graph</code>命令可以看到分支合并图。</p><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> branchname<br></code></pre></td></tr></table></figure><p>merge默认使用的是FastForward模式，在删除了被合并分支之后是看不出合并历史记录的，可以使用–no–ff记录合并历史：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> merge --<span class="hljs-literal">no</span>--ff -m <span class="hljs-string">&quot;merge with no-ff&quot;</span> dev<br></code></pre></td></tr></table></figure><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p><p>使用这种模式，再用<code>git log</code>就可以看到分支合并历史。</p><p>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/919023225142304/0" alt="git-no-ff-mode"></p><h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><p>Git分支十分强大，在团队开发中应该充分应用。</p><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h2 id="Bug-Branch"><a href="#Bug-Branch" class="headerlink" title="Bug Branch"></a>Bug Branch</h2><p>查看stash有多少个场景：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git stash list</span><br></code></pre></td></tr></table></figure><p>同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。</p><p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">git cherry-pick &lt;commit <span class="hljs-built_in">id</span>&gt;<br></code></pre></td></tr></table></figure><p>Git自动给dev分支做了一次提交，注意这次提交的commit是<code>1d4b803</code>，它并不同于master的<code>4c805e2</code>，因为这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在dev分支上手动再把修bug的过程重复一遍。</p><h3 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h3><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p><p>在master分支上修复的bug，想要合并到当前dev分支，先切换到dev分支，再用<code>git cherry-pick </code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p><h2 id="Feature-Branch"><a href="#Feature-Branch" class="headerlink" title="Feature Branch"></a>Feature Branch</h2><h3 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h3><p>开发一个新feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D </code>强行删除。</p><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin </code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin </code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to  origin/</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><h3 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h3><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><h2 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h2><h3 id="小结-9"><a href="#小结-9" class="headerlink" title="小结"></a>小结</h3><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul><h1 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h1><h3 id="小结-10"><a href="#小结-10" class="headerlink" title="小结"></a>小结</h3><ul><li>命令<code>git tag </code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id，<code>git tag &lt;tagname&gt; &lt;commitid&gt;</code></li><li>命令<code>git tag -a  -m &quot;blablabla...&quot;</code>可以指定标签信息；</li><li>命令<code>git tag</code>可以查看所有标签。</li><li>查看某个tag的信息，<code>git show &lt;tagname&gt;</code></li><li>tag针对的是某个提交commit</li></ul><h1 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h1><ol><li><p>首先Fork该项目，会在你的github账号下克隆了一个远程账户，然后从自己账号下的仓库clone到local：</p> <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:username/reponame.git<br></code></pre></td></tr></table></figure><p> 如果是别人的项目，就要先fork一个到自己的账号下，然后clone到本地，这样之后push的时候才会有权限，不然直接从别人的repo clone的话，是无法push的。</p></li><li><p>在local repo中，cd到相应目录，然后干活，然后add,commit相应文件，最后<code>git push origin &lt;branchname&gt;</code>推送到远程仓库，然后发起pr，希望对方能够接受你的修改。</p></li></ol><h1 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h1><h2 id="Git-ignore"><a href="#Git-ignore" class="headerlink" title="Git ignore"></a>Git ignore</h2><h3 id="小结-11"><a href="#小结-11" class="headerlink" title="小结"></a>小结</h3><ul><li>忽略某些文件时，需要编写<code>.gitignore</code>；</li><li><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理</li></ul><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><p>我们只需要敲一行命令，告诉Git，以后<code>st</code>就表示<code>status</code>：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">$ git <span class="hljs-keyword">config</span> --<span class="hljs-keyword">global</span> <span class="hljs-keyword">alias</span><span class="hljs-variable">.st</span> status<br></code></pre></td></tr></table></figure><p>甚至还有人丧心病狂地把<code>lg</code>配置成了：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">git config --global alias.lg <span class="hljs-string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Miscellaneous-keep updating</title>
    <link href="/2020/03/07/Miscellaneous/"/>
    <url>/2020/03/07/Miscellaneous/</url>
    
    <content type="html"><![CDATA[<h2 id="conda下载太慢"><a href="#conda下载太慢" class="headerlink" title="conda下载太慢"></a>conda下载太慢</h2><p>修改镜像，添加清华提供的镜像</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs<span class="hljs-regexp">/free/</span><br><br>conda config --set show_channel_urls yes<br></code></pre></td></tr></table></figure><h2 id="brew安装极慢，-iTerm2设置代理解决速度问题。"><a href="#brew安装极慢，-iTerm2设置代理解决速度问题。" class="headerlink" title="brew安装极慢， iTerm2设置代理解决速度问题。"></a>brew安装极慢， iTerm2设置代理解决速度问题。</h2><p>我自己用的是zsh，修改配置文件 .zshrc</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ vim ~/.zshrc<br><span class="hljs-comment"># proxy</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">http_proxy</span>=http://127.0.0.1:端口<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">https_proxy</span>=<span class="hljs-variable">$http_proxy</span><br>$ source ~/.zshrc<br></code></pre></td></tr></table></figure><p>端口为你的代理软件的http端口</p><p>测试IP：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span>  <span class="hljs-built_in">curl</span> ip.sb<br></code></pre></td></tr></table></figure><h2 id="ssh方式cloneGithub项目到本地"><a href="#ssh方式cloneGithub项目到本地" class="headerlink" title="ssh方式cloneGithub项目到本地"></a>ssh方式cloneGithub项目到本地</h2><p>vim修改本机的 ~/.ssh/config，给里面添加一条记录。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">vi</span> ~/<span class="hljs-selector-class">.ssh</span>/<span class="hljs-selector-tag">config</span><br><span class="hljs-selector-tag">Host</span> <span class="hljs-selector-tag">github</span><span class="hljs-selector-class">.com</span><br>  <span class="hljs-selector-tag">ProxyCommand</span> <span class="hljs-selector-tag">nc</span> <span class="hljs-selector-tag">-v</span> <span class="hljs-selector-tag">-x</span> 127.0.0.1<span class="hljs-selector-pseudo">:sock</span>端口号 %<span class="hljs-selector-tag">h</span> %<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>然后:wq保存退出，现在可以看结果了。</p><h2 id="jupyter-notebook-python2-3环境切换"><a href="#jupyter-notebook-python2-3环境切换" class="headerlink" title="jupyter notebook python2 3环境切换"></a>jupyter notebook python2 3环境切换</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">ipython kernel <span class="hljs-keyword">install</span> <span class="hljs-comment">--name python2  </span><br>ipython kernel <span class="hljs-keyword">install</span> <span class="hljs-comment">--name python3 </span><br></code></pre></td></tr></table></figure><h2 id="消除Macos程序坞自动隐藏时间"><a href="#消除Macos程序坞自动隐藏时间" class="headerlink" title="消除Macos程序坞自动隐藏时间"></a>消除Macos程序坞自动隐藏时间</h2><p>在设置-程序坞里设置自动显示和隐藏后，在terminal里输入：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">defaults <span class="hljs-built_in">write</span> com.apple.Dock autohide-<span class="hljs-built_in">delay</span> -<span class="hljs-keyword">float</span> <span class="hljs-number">0</span> &amp;&amp; killall Dock<br></code></pre></td></tr></table></figure><p>想要还原默认的隐藏速度：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">defaults <span class="hljs-keyword">delete</span> com.apple.Dock autohide-<span class="hljs-built_in">delay</span> &amp;&amp; killall Dock<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>terminal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown syntax</title>
    <link href="/2019/04/06/MD-syntax/"/>
    <url>/2019/04/06/MD-syntax/</url>
    
    <content type="html"><![CDATA[<h1 id="Summary-of-md-syntax"><a href="#Summary-of-md-syntax" class="headerlink" title="Summary of md syntax"></a>Summary of md syntax</h1><h2 id="Block-Elements"><a href="#Block-Elements" class="headerlink" title="Block Elements"></a>Block Elements</h2><h3 id="Paragraphs-and-Line-Breaks"><a href="#Paragraphs-and-Line-Breaks" class="headerlink" title="Paragraphs and Line Breaks"></a>Paragraphs and Line Breaks</h3><p>When you do want to insert a <code>&lt;br/&gt;</code> break tag using md, you end a line with 2 or more spaces, then type return.</p><p><code># first-leve header</code></p><p><code>## second-level header</code></p><p>In strict mode, <strong>a space</strong> should be typed between the hash mark and header.</p><h3 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h3><p>A space should be typed after &gt; to realize quotations:</p><p><code>&gt; quote</code>  </p><p>Add additional levels of &gt; to realize nested blockquotes:   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">&gt; quote<br>&gt;<br>&gt;&gt; nested quote<br>&gt;<br>&gt; back to the first level<br></code></pre></td></tr></table></figure><p>Blockquotes could contain other elements in MD, including headers lists and code blocks:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">&gt; # header<br>&gt;<br>&gt; 1. first list item<br>&gt; 2. second list item  <br>&gt; <br>&gt; Here&#39;s some example code:<br>&gt; <br>&gt; return shell_exec(&quot;echo $input | $markdown_script&quot;);<br></code></pre></td></tr></table></figure><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>A space should be put after * asterisk, - dash or hyphen + plus:  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> Red<br><br><span class="hljs-bullet">-</span> Green<br><br><span class="hljs-bullet">+</span> Blue<br></code></pre></td></tr></table></figure><p>The actual numbers you use to mark the list have no effect on the HTML output:  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> Bird<br><span class="hljs-bullet">2.</span> Parish<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> a<br><span class="hljs-bullet">1.</span> b<br></code></pre></td></tr></table></figure><p>To put a blockquote within a list item, the blockquote’s &gt; delimiters need to be indented:  </p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">- A list <span class="hljs-keyword">item</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">a</span> blockquote:<br><br>&gt; this is <span class="hljs-keyword">a</span> blockquote<br>&gt; inside <span class="hljs-keyword">a</span> list <span class="hljs-keyword">item</span>.<br></code></pre></td></tr></table></figure><p>To put a code block within a list item, the code block needs to be indented twice or indented once and wrapped in backticks:  </p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">- A list <span class="hljs-keyword">item</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">a</span> code block:<br>`print`<br></code></pre></td></tr></table></figure><p><em>Summary: Elements need to be indented if we want to put them with in a list item.</em>  </p><p>If the number-period-space sequence at the beginning of a line, we could backslash-escape it, and MD will generate the literal characters:  </p><p><code>1986. what a great season.</code></p><p><code>1986\. what a great season.</code></p><h3 id="Code-Blocks"><a href="#Code-Blocks" class="headerlink" title="Code Blocks"></a>Code Blocks</h3><p>Use `` or ``` ``` to produce a code block.  </p><p>When use ``` ```, the language name should subsequce, and the code will be typed in the next line.  </p><p>Tab with 4 spaces will do it too.  </p><h3 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h3><p>Use more than 3 asterisks, hyphens, pluses or underscores to produce a horizontal rule tag.  </p><h2 id="Span-Elements"><a href="#Span-Elements" class="headerlink" title="Span Elements"></a>Span Elements</h2><p>Link texts is delimited by square bracket, and a set of regular parentheses is followed with URL in it:  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[an example]</span>(<span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span>/&quot;<span class="hljs-selector-tag">baidu</span>&quot;)<br><span class="hljs-selector-tag">or</span> <span class="hljs-selector-tag">use</span> <span class="hljs-selector-tag">Command</span> <span class="hljs-selector-tag">K</span><br></code></pre></td></tr></table></figure><p>Or use a second set of square brackets,  inside which you place a label, and you can define the link label anywhere in the document:  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">[example][id]<br>[id]: http:<span class="hljs-regexp">//</span>baidu.com/<span class="hljs-string">&quot;Optional Title&quot;</span><br>[id]: http:<span class="hljs-regexp">//</span>baidu.com/<span class="hljs-string">&quot;Optional Title&quot;</span><br>[id]: http:<span class="hljs-regexp">//</span>baidu.com/<span class="hljs-string">&quot;Optional Title&quot;</span><br>[id]: &lt;http:<span class="hljs-regexp">//</span>baidu.com/&gt;<span class="hljs-string">&quot;Optional Title&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs prolog">visit [<span class="hljs-symbol">Google</span>][<span class="hljs-symbol">Google</span>] for more information.<br>[<span class="hljs-symbol">Google</span>]: http://google.com<span class="hljs-string">&quot;Google&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal">text[^<span class="hljs-number">10</span>]<br>[^<span class="hljs-number">10</span>]: <span class="hljs-keyword">annotation</span><br></code></pre></td></tr></table></figure><h3 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake">**Bold** <span class="hljs-keyword">Command</span> B<br>*Italics*<span class="hljs-keyword">Command</span> I<br>==Highlight==Shift <span class="hljs-keyword">Command</span> H <br>~Underline~ <span class="hljs-keyword">Command</span> U<br>~~strikethrough~~Ctrl Shift `<br></code></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>A single backtick in a code span: <code>`</code>  </p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">use</span> the `<span class="hljs-built_in">print</span>()` <span class="hljs-function"><span class="hljs-keyword">function</span></span><br></code></pre></td></tr></table></figure><p>Backticks, angle brackets, ampersands, hash marks can be literally produced within a code span wrapped by a set of backticks.  </p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>2 styles,like web links: inline and reference:  </p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xquery">![<span class="hljs-type">text</span>]<span class="hljs-built_in">(path</span> <span class="hljs-keyword">to</span> img)<br><br>![<span class="hljs-type">text</span>]<span class="hljs-built_in">[id</span>]<br><span class="hljs-built_in">[id</span>]:<span class="hljs-built_in"> path</span> <span class="hljs-keyword">to</span> img<br><br><span class="hljs-keyword">or</span> use Shift Command I<br></code></pre></td></tr></table></figure><p>Use regular HTML <code>&lt;img&gt;</code> tags to specify the dimensions of images.  </p><h2 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h2><h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">1</span>|<span class="hljs-string">2</span>|<span class="hljs-string">3</span>|<br>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<span class="hljs-string">---</span>|<br>|<span class="hljs-string">4</span>|<span class="hljs-string">5</span>|<span class="hljs-string">6</span>|<br></code></pre></td></tr></table></figure><p>Or use Option(alt)  Command T.  </p><p>If you want to shouw the actually text of a URL or email address, and also have it be a clickable link, use a set of angle bracket to surround it.  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.google</span><span class="hljs-selector-class">.com</span>&gt;<br>&lt;<span class="hljs-selector-tag">xxx</span><span class="hljs-keyword">@xxx</span>.com&gt;<br></code></pre></td></tr></table></figure><h3 id="Backslash-Escapes"><a href="#Backslash-Escapes" class="headerlink" title="Backslash Escapes"></a>Backslash Escapes</h3><p>Use backslash escapes to generate literal characters which would otherwise have special meaning in Markdown’s formatting syntax.  </p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\*literal</span> asterisk<span class="hljs-string">\*</span><br></code></pre></td></tr></table></figure><p>Character below can use the backslash escape rule.  </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">\ <span class="hljs-keyword">backslash</span><br><span class="hljs-keyword">` </span><span class="hljs-keyword">backtick</span><br><span class="hljs-keyword">* </span>asterisk<br>_ underscore<br>&#123;&#125; curly <span class="hljs-keyword">braces</span><br><span class="hljs-keyword">[] </span>sqace <span class="hljs-keyword">brackets</span><br><span class="hljs-keyword">() </span>parentheses<br><span class="hljs-comment"># hash mark</span><br>+ plus sign<br>- dash, hyphen, minus sign<br>. dot<br>! exclamation mark<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
